name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  trufflehog-scan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog --version
      
      - name: Scan Git History
        continue-on-error: true
        run: |
          echo "=== Scanning Git History ==="
          trufflehog git file://. --json --no-verification > git-secrets.json || true
          echo "Found $(cat git-secrets.json | wc -l) potential secrets in git history"
          if [ -s git-secrets.json ]; then
            echo "Secrets found in git history"
          else
            echo "No secrets detected in git history"
          fi
      
      - name: Scan Filesystem
        continue-on-error: true
        run: |
          echo "=== Scanning Current Filesystem ==="
          trufflehog filesystem . --json --no-verification > filesystem-secrets.json || true
          echo "Found $(cat filesystem-secrets.json | wc -l) potential secrets in filesystem"
          if [ -s filesystem-secrets.json ]; then
            echo "Secrets found in filesystem"
          else
            echo "No secrets detected in filesystem"
          fi
      
      - name: Report Secret Count (Non-Blocking)
        if: always()
        run: |
          total_secrets=$(($(cat git-secrets.json 2>/dev/null | wc -l) + $(cat filesystem-secrets.json 2>/dev/null | wc -l)))
          if [ $total_secrets -gt 0 ]; then
            echo "⚠️ Found $total_secrets potential secrets!"
            echo "Please review the scan results in the artifacts."
          else
            echo "✅ No secrets found"
          fi
      
      - name: Upload Scan Results as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-scan-results
          path: |
            git-secrets.json
            filesystem-secrets.json
      
      - name: Convert TruffleHog JSON to SARIF
        if: always()
        run: |
          # Install Python for conversion script
          pip install sarif-om jschema-to-python
          
          # Create a simple converter script
          cat > convert_to_sarif.py << 'EOF'
          import json
          import sys
          
          def convert_to_sarif(trufflehog_json_file, output_sarif_file):
              sarif = {
                  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                  "version": "2.1.0",
                  "runs": [{
                      "tool": {
                          "driver": {
                              "name": "TruffleHog",
                              "informationUri": "https://github.com/trufflesecurity/trufflehog",
                              "version": "3.0.0",
                              "rules": []
                          }
                      },
                      "results": []
                  }]
              }
              
              try:
                  with open(trufflehog_json_file, 'r') as f:
                      for line_num, line in enumerate(f):
                          if not line.strip():
                              continue
                          try:
                              finding = json.loads(line)
                              
                              detector_name = finding.get('DetectorName', 'Unknown')
                              source_metadata = finding.get('SourceMetadata', {})
                              data = source_metadata.get('Data', {})
                              git_data = data.get('Git', {})
                              
                              file_path = git_data.get('file', 'unknown')
                              line_number = git_data.get('line', 1)
                              
                              # Add rule if not exists
                              rule_id = f"trufflehog/{detector_name}"
                              if not any(r['id'] == rule_id for r in sarif['runs'][0]['tool']['driver']['rules']):
                                  sarif['runs'][0]['tool']['driver']['rules'].append({
                                      "id": rule_id,
                                      "name": detector_name,
                                      "shortDescription": {
                                          "text": f"Potential {detector_name} secret detected"
                                      },
                                      "fullDescription": {
                                          "text": f"TruffleHog detected a potential {detector_name} secret"
                                      },
                                      "help": {
                                          "text": "Review and rotate this secret if it's valid"
                                      },
                                      "defaultConfiguration": {
                                          "level": "error"
                                      }
                                  })
                              
                              # Add result
                              sarif['runs'][0]['results'].append({
                                  "ruleId": rule_id,
                                  "message": {
                                      "text": f"Potential {detector_name} secret found"
                                  },
                                  "locations": [{
                                      "physicalLocation": {
                                          "artifactLocation": {
                                              "uri": file_path
                                          },
                                          "region": {
                                              "startLine": int(line_number) if line_number else 1
                                          }
                                      }
                                  }],
                                  "level": "error"
                              })
                          except json.JSONDecodeError:
                              print(f"Warning: Skipping invalid JSON on line {line_num + 1}")
                              continue
                          except Exception as e:
                              print(f"Warning: Error processing finding on line {line_num + 1}: {e}")
                              continue
              except FileNotFoundError:
                  print(f"No findings file found: {trufflehog_json_file}")
              
              with open(output_sarif_file, 'w') as f:
                  json.dump(sarif, f, indent=2)
          
          if __name__ == "__main__":
              convert_to_sarif('git-secrets.json', 'git-secrets.sarif')
              convert_to_sarif('filesystem-secrets.json', 'filesystem-secrets.sarif')
              print("Conversion complete!")
          EOF
          
          python convert_to_sarif.py
      
      - name: Upload TruffleHog SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: git-secrets.sarif
          category: trufflehog-git
      
      - name: Upload TruffleHog Filesystem SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: filesystem-secrets.sarif
          category: trufflehog-filesystem

  build-and-push:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    needs: trufflehog-scan
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

  semgrep-scan:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    needs: trufflehog-scan
    permissions:
      contents: read
      security-events: write
      actions: read
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Semgrep Scan and generate SARIF
        run: semgrep scan --sarif --output semgrep.sarif
      
      - name: Upload Semgrep SARIF to GitHub Security Dashboard
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner on the container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'sarif'
          output: 'trivy.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
      
      - name: Upload Trivy SARIF to GitHub Security Dashboard
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy.sarif'

  codeql:
    name: CodeQL Deep SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'
          queries: security-extended
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
