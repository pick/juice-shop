name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create High-Confidence Gitleaks Config
        run: |
          cat > .gitleaks.toml << 'EOF'
          title = "High Confidence Secrets Only"
          
          [[rules]]
          id = "aws-access-token"
          description = "AWS Access Token"
          regex = '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}'''
          
          [[rules]]
          id = "aws-secret-key"
          description = "AWS Secret Key"
          regex = '''(?i)aws(.{0,20})?(?-i)['\"][0-9a-zA-Z\/+]{40}['\"]'''
          
          [[rules]]
          id = "github-pat"
          description = "GitHub Personal Access Token"
          regex = '''ghp_[0-9a-zA-Z]{36}'''
          
          [[rules]]
          id = "github-oauth"
          description = "GitHub OAuth Access Token"
          regex = '''gho_[0-9a-zA-Z]{36}'''
          
          [[rules]]
          id = "github-app-token"
          description = "GitHub App Token"
          regex = '''(ghu|ghs)_[0-9a-zA-Z]{36}'''
          
          [[rules]]
          id = "slack-token"
          description = "Slack Token"
          regex = '''xox[baprs]-([0-9a-zA-Z]{10,48})'''
          
          [[rules]]
          id = "slack-webhook"
          description = "Slack Webhook"
          regex = '''https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'''
          
          [[rules]]
          id = "private-key"
          description = "Private Key"
          regex = '''-----BEGIN (RSA|OPENSSH|DSA|EC|PGP) PRIVATE KEY-----'''
          
          [[rules]]
          id = "connection-string"
          description = "Database Connection String"
          regex = '''(?i)(mongodb(\+srv)?|mysql|postgresql|postgres):\/\/[^\s'"]+:[^\s'"]+@'''
          
          [allowlist]
          paths = [
            '''node_modules/''',
            '''package-lock.json''',
            '''yarn.lock''',
            '''.git/''',
            '''dist/''',
            '''build/''',
            '''coverage/'''
          ]
          
          regexes = [
            '''cookie-parser''',
            '''body-parser''',
            '''express-session''',
            '''passport''',
            '''example\.com''',
            '''localhost''',
            '''127\.0\.0\.1'''
          ]
          EOF
      
      - name: Download and Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.4_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/
      
      - name: Run Gitleaks
        continue-on-error: true
        run: |
          gitleaks detect \
            --source . \
            --config .gitleaks.toml \
            --report-path gitleaks.sarif \
            --report-format sarif \
            --verbose \
            --no-color \
            --exit-code 0
      
      - name: Fix SARIF
        if: always()
        run: |
          if [ -f gitleaks.sarif ]; then
            sudo apt-get update && sudo apt-get install -y jq
            jq 'del(.runs[].results[].locations[].physicalLocation.region.startColumn, .runs[].results[].locations[].physicalLocation.region.endColumn)' gitleaks.sarif > gitleaks-fixed.sarif
            mv gitleaks-fixed.sarif gitleaks.sarif
          fi
      
      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  build-and-push:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

  semgrep-scan:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    permissions:
      contents: read
      security-events: write
      actions: read
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Semgrep
        run: semgrep scan --sarif --output semgrep.sarif
      
      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'sarif'
          output: 'trivy.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
      
      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy.sarif'

  codeql:
    name: CodeQL SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'
          queries: security-extended
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
